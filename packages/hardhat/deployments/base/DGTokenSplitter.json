{
  "address": "0x72159cC8fDA737460aA82e6C35de3fA21fCbB58d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ACCESS_DENIED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DUPLICATE_RECIPIENT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_RECIPIENT_COUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INSUFFICIENT_SPLIT_AMOUNT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_INPUT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_LOCK_ADDRESS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_RECIPIENT",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TRANSFER_FAILED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Erc20Split",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Erc20SplitEqual",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "EthSplit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "EthSplitEqual",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "FeeSwitchToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockAddress",
          "type": "address"
        }
      ],
      "name": "SplitLockUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "feeSwitch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getKeyExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_splitLock",
          "type": "address"
        }
      ],
      "name": "setSplitLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "splitERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "splitETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "name": "splitEqualERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "recipients",
          "type": "address[]"
        }
      ],
      "name": "splitEqualETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "toggleFeeSwitch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xea1c7b2fa3026bf5defec97cd8e7cfafd873fc5c125adb833907bfb642838b1e",
  "receipt": {
    "to": null,
    "from": "0xf2a46D2c179AC57b44562aDDB0fdC16796cAd259",
    "contractAddress": "0x72159cC8fDA737460aA82e6C35de3fA21fCbB58d",
    "transactionIndex": 157,
    "gasUsed": "1661547",
    "logsBloom": "0x00000000000000000000000000000000000000000000080000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000020000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000002000200000000000000000000000000000000000000020000000000000000000000000000040000000000000000000000000000000000000",
    "blockHash": "0xdc201cd8be75c22134a79c41e3386406a3008c8121d059964b847c0f836987d8",
    "transactionHash": "0xea1c7b2fa3026bf5defec97cd8e7cfafd873fc5c125adb833907bfb642838b1e",
    "logs": [
      {
        "transactionIndex": 157,
        "blockNumber": 34070355,
        "transactionHash": "0xea1c7b2fa3026bf5defec97cd8e7cfafd873fc5c125adb833907bfb642838b1e",
        "address": "0x72159cC8fDA737460aA82e6C35de3fA21fCbB58d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d443188b33a13a24f63ac3a49d54db97cf64349a"
        ],
        "data": "0x",
        "logIndex": 1023,
        "blockHash": "0xdc201cd8be75c22134a79c41e3386406a3008c8121d059964b847c0f836987d8"
      }
    ],
    "blockNumber": 34070355,
    "cumulativeGasUsed": "28919680",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd443188B33a13A24F63AC3A49d54DB97cf64349A"
  ],
  "numDeployments": 1,
  "solcInputHash": "d93582f8f802d01c8515437a306656d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ACCESS_DENIED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DUPLICATE_RECIPIENT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_RECIPIENT_COUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INSUFFICIENT_SPLIT_AMOUNT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_INPUT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_LOCK_ADDRESS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_RECIPIENT\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TRANSFER_FAILED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Erc20Split\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Erc20SplitEqual\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"EthSplit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"EthSplitEqual\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"FeeSwitchToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockAddress\",\"type\":\"address\"}],\"name\":\"SplitLockUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feeSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getKeyExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_splitLock\",\"type\":\"address\"}],\"name\":\"setSplitLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"splitERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"splitETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"splitEqualERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"splitEqualETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"toggleFeeSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_initialOwner\":\"The initial owner of the contract\"}},\"getKeyExpiration(address)\":{\"params\":{\"user\":\"The address to check\"},\"returns\":{\"_0\":\"expiration The expiration timestamp (0 if no key or feeSwitch is off)\"}},\"hasAccess(address)\":{\"params\":{\"user\":\"The address to check\"},\"returns\":{\"_0\":\"hasAccess True if user has access\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setSplitLock(address)\":{\"params\":{\"_splitLock\":\"The Unlock Protocol lock address\"}},\"splitERC20(address,address[],uint256[])\":{\"params\":{\"amounts\":\"The amounts each recipient shall receive\",\"recipients\":\"The noble recipients of the ERC20 tokens\",\"token\":\"The token of friendship to be shared amongst the recipients\"}},\"splitETH(address[],uint256[])\":{\"params\":{\"amounts\":\"The amounts each recipient shall receive\",\"recipients\":\"The noble recipients of the ETH\"}},\"splitEqualERC20(address,address[],uint256)\":{\"params\":{\"recipients\":\"The noble recipients of the ERC20 tokens\",\"token\":\"The token of friendship to be shared amongst the recipients\",\"totalAmount\":\"The total amount to be shared\"}},\"splitEqualETH(address[])\":{\"details\":\"The contract gracefully adds any leftover dust to the amount to be received by the first recipient in the input array.\",\"params\":{\"recipients\":\"The noble recipients of the ETH\"}},\"toggleFeeSwitch(bool)\":{\"params\":{\"_enabled\":\"Whether to enable token-gating\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address)\":{\"params\":{\"token\":\"The address of the ERC20 token, or 0 for ETH\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"The constructor sets the owner of the contract\"},\"getKeyExpiration(address)\":{\"notice\":\"Get key expiration timestamp for a user\"},\"hasAccess(address)\":{\"notice\":\"Check if an address has access to protected functions\"},\"setSplitLock(address)\":{\"notice\":\"Set the splitLock address for token-gating\"},\"splitERC20(address,address[],uint256[])\":{\"notice\":\"Splits the ERC20 tokens amongst the given recipients, according to the specified amounts\"},\"splitETH(address[],uint256[])\":{\"notice\":\"Splits the ETH amongst the given recipients, according to the specified amounts\"},\"splitEqualERC20(address,address[],uint256)\":{\"notice\":\"Splits the ERC20 tokens equally amongst the given recipients\"},\"splitEqualETH(address[])\":{\"notice\":\"Splits the ETH equally amongst the given recipients\"},\"toggleFeeSwitch(bool)\":{\"notice\":\"Toggle the feeSwitch on or off\"},\"withdraw(address)\":{\"notice\":\"Withdraws the remaining ETH or ERC20 tokens to the owner's address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Splitter.sol\":\"DGTokenSplitter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Splitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title DGTokenSplitter\\r\\n * @notice A smart contract to split ETH or ERC20 tokens between multiple recipients with optional Unlock Protocol token-gating.\\r\\n * @dev This is intended for research and development purposes only. Use this contract at your own risk and discretion.\\r\\n */\\r\\n\\r\\ninterface IUnlockV13 {\\r\\n    function getHasValidKey(address _keyOwner) external view returns (bool);\\r\\n    function balanceOf(address _keyOwner) external view returns (uint256);\\r\\n    function keyExpirationTimestampFor(address _keyOwner) external view returns (uint256);\\r\\n    function isLockManager(address _lockManager) external view returns (bool);\\r\\n}\\r\\n\\r\\ncontract DGTokenSplitter is ReentrancyGuard, Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // State variables\\r\\n    bool public feeSwitch = false; // Default is off (open access)\\r\\n    address public splitLock; // Unlock Protocol lock address for token-gating\\r\\n\\r\\n    // Events\\r\\n    event EthSplit(address indexed sender, uint256 totalAmount, address payable[] recipients, uint256[] amounts);\\r\\n    event EthSplitEqual(address indexed sender, uint256 totalAmount, address payable[] recipients);\\r\\n    event Erc20Split(address indexed sender, address payable[] recipients, uint256[] amounts, IERC20 token);\\r\\n    event Erc20SplitEqual(address indexed sender, uint256 totalAmount, address payable[] recipients, IERC20 token);\\r\\n    event FeeSwitchToggled(bool enabled);\\r\\n    event SplitLockUpdated(address indexed lockAddress);\\r\\n\\r\\n    //*********************************************************************//\\r\\n    // --------------------------- custom errors ------------------------- //\\r\\n    //*********************************************************************//\\r\\n    error INVALID_INPUT();\\r\\n    error INSUFFICIENT_RECIPIENT_COUNT();\\r\\n    error INVALID_RECIPIENT();\\r\\n    error INSUFFICIENT_SPLIT_AMOUNT();\\r\\n    error TRANSFER_FAILED();\\r\\n    error DUPLICATE_RECIPIENT();\\r\\n    error ACCESS_DENIED(); // User doesn't have valid key when feeSwitch is on\\r\\n    error INVALID_LOCK_ADDRESS();\\r\\n\\r\\n    /**\\r\\n     * @notice The constructor sets the owner of the contract\\r\\n     * @param _initialOwner The initial owner of the contract\\r\\n     */\\r\\n    constructor(address _initialOwner) Ownable(_initialOwner) {\\r\\n        // Ownable constructor handles ownership setup\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Modifier to check access control based on feeSwitch\\r\\n     * @dev If feeSwitch is on, only users with valid keys can access protected functions\\r\\n     */\\r\\n    modifier checkAccess() {\\r\\n        if (feeSwitch && splitLock != address(0)) {\\r\\n            IUnlockV13 lock = IUnlockV13(splitLock);\\r\\n            if (!lock.getHasValidKey(msg.sender)) {\\r\\n                revert ACCESS_DENIED();\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice A modifier to check for duplicates and revert before execute a function\\r\\n     */\\r\\n\\r\\n    modifier checkForDuplicates(address payable[] calldata recipients) {\\r\\n        uint256 length = recipients.length;\\r\\n        for (uint256 i = 0; i < length; i++) {\\r\\n            for (uint256 j = i + 1; j < length; j++) {\\r\\n                if (recipients[i] == recipients[j]) {\\r\\n                    revert DUPLICATE_RECIPIENT();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Toggle the feeSwitch on or off\\r\\n     * @param _enabled Whether to enable token-gating\\r\\n     */\\r\\n    function toggleFeeSwitch(bool _enabled) external onlyOwner {\\r\\n        feeSwitch = _enabled;\\r\\n        emit FeeSwitchToggled(_enabled);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the splitLock address for token-gating\\r\\n     * @param _splitLock The Unlock Protocol lock address\\r\\n     */\\r\\n    function setSplitLock(address _splitLock) external onlyOwner {\\r\\n        if (_splitLock != address(0)) {\\r\\n            // Verify it's a valid Unlock lock by checking if it has the required interface\\r\\n            try IUnlockV13(_splitLock).getHasValidKey(address(this)) returns (bool) {\\r\\n                // Interface check passed\\r\\n            } catch {\\r\\n                revert INVALID_LOCK_ADDRESS();\\r\\n            }\\r\\n        }\\r\\n        splitLock = _splitLock;\\r\\n        emit SplitLockUpdated(_splitLock);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if an address has access to protected functions\\r\\n     * @param user The address to check\\r\\n     * @return hasAccess True if user has access\\r\\n     */\\r\\n    function hasAccess(address user) external view returns (bool) {\\r\\n        if (!feeSwitch || splitLock == address(0)) {\\r\\n            return true; // Open access when feeSwitch is off\\r\\n        }\\r\\n        \\r\\n        IUnlockV13 lock = IUnlockV13(splitLock);\\r\\n        return lock.getHasValidKey(user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get key expiration timestamp for a user\\r\\n     * @param user The address to check\\r\\n     * @return expiration The expiration timestamp (0 if no key or feeSwitch is off)\\r\\n     */\\r\\n    function getKeyExpiration(address user) external view returns (uint256) {\\r\\n        if (!feeSwitch || splitLock == address(0)) {\\r\\n            return 0;\\r\\n        }\\r\\n        \\r\\n        IUnlockV13 lock = IUnlockV13(splitLock);\\r\\n        return lock.keyExpirationTimestampFor(user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Splits the ETH amongst the given recipients, according to the specified amounts\\r\\n     * @param recipients The noble recipients of the ETH\\r\\n     * @param amounts The amounts each recipient shall receive\\r\\n     */\\r\\n    function splitETH(\\r\\n        address payable[] calldata recipients,\\r\\n        uint256[] calldata amounts\\r\\n    ) external payable nonReentrant checkAccess checkForDuplicates(recipients) {\\r\\n        uint256 remainingAmount = _splitETH(recipients, amounts, msg.value);\\r\\n        emit EthSplit(msg.sender, msg.value, recipients, amounts);\\r\\n\\r\\n        if (remainingAmount > 0) {\\r\\n            (bool success, ) = msg.sender.call{ value: remainingAmount, gas: 20000 }(\\\"\\\");\\r\\n            if (!success) revert TRANSFER_FAILED();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Splits the ETH equally amongst the given recipients\\r\\n     * @dev The contract gracefully adds any leftover dust to the amount to be received by the first recipient in the input array.\\r\\n     * @param recipients The noble recipients of the ETH\\r\\n     */\\r\\n\\r\\n    function splitEqualETH(\\r\\n        address payable[] calldata recipients\\r\\n    ) external payable nonReentrant checkAccess checkForDuplicates(recipients) {\\r\\n        uint256 totalAmount = msg.value;\\r\\n        uint256 rLength = recipients.length;\\r\\n        uint256 equalAmount = totalAmount / rLength;\\r\\n        uint256 remainingAmount = totalAmount % rLength;\\r\\n\\r\\n        if (rLength > 25 || rLength < 2) revert INSUFFICIENT_RECIPIENT_COUNT();\\r\\n\\r\\n        for (uint256 i = 0; i < rLength; ) {\\r\\n            if (recipients[i] == address(0)) revert INVALID_RECIPIENT();\\r\\n            uint256 amountToSend = equalAmount;\\r\\n            if (i == 0) {\\r\\n                amountToSend = amountToSend + remainingAmount;\\r\\n            }\\r\\n            (bool success, ) = recipients[i].call{ value: amountToSend, gas: 20000 }(\\\"\\\");\\r\\n            if (!success) revert TRANSFER_FAILED();\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit EthSplitEqual(msg.sender, msg.value, recipients);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Splits the ERC20 tokens amongst the given recipients, according to the specified amounts\\r\\n     * @param token The token of friendship to be shared amongst the recipients\\r\\n     * @param recipients The noble recipients of the ERC20 tokens\\r\\n     * @param amounts The amounts each recipient shall receive\\r\\n     */\\r\\n    function splitERC20(\\r\\n        IERC20 token,\\r\\n        address payable[] calldata recipients,\\r\\n        uint256[] calldata amounts\\r\\n    ) external nonReentrant checkAccess checkForDuplicates(recipients) {\\r\\n        _transferTokensFromSenderToRecipients(token, recipients, amounts);\\r\\n        emit Erc20Split(msg.sender, recipients, amounts, token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Splits the ERC20 tokens equally amongst the given recipients\\r\\n     * @param token The token of friendship to be shared amongst the recipients\\r\\n     * @param recipients The noble recipients of the ERC20 tokens\\r\\n     * @param totalAmount The total amount to be shared\\r\\n     */\\r\\n    function splitEqualERC20(\\r\\n        IERC20 token,\\r\\n        address payable[] calldata recipients,\\r\\n        uint256 totalAmount\\r\\n    ) external nonReentrant checkAccess checkForDuplicates(recipients) {\\r\\n        uint256 rLength = recipients.length;\\r\\n\\r\\n        if (rLength > 25 || rLength < 2) revert INSUFFICIENT_RECIPIENT_COUNT();\\r\\n\\r\\n        uint256 equalAmount = totalAmount / rLength;\\r\\n\\r\\n        uint256 remainingAmount = totalAmount % rLength;\\r\\n        for (uint256 i = 0; i < rLength; ) {\\r\\n            if (recipients[i] == address(0)) revert INVALID_RECIPIENT();\\r\\n\\r\\n            uint256 amountToSend = equalAmount;\\r\\n            if (i == 0) {\\r\\n                amountToSend = amountToSend + remainingAmount;\\r\\n            }\\r\\n            SafeERC20.safeTransferFrom(token, msg.sender, recipients[i], amountToSend);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Erc20SplitEqual(msg.sender, totalAmount, recipients, token);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to split the ETH amongst the given recipients, according to the specified amounts\\r\\n     * @param recipients The noble recipients of the ETH\\r\\n     * @param amounts The amounts each recipient shall receive\\r\\n     * @param totalAvailable The total available ETH to be split\\r\\n     * @return remainingAmount The remaining ETH dust\\r\\n     */\\r\\n    function _splitETH(\\r\\n        address payable[] calldata recipients,\\r\\n        uint256[] calldata amounts,\\r\\n        uint256 totalAvailable\\r\\n    ) internal returns (uint256 remainingAmount) {\\r\\n        uint256 length = recipients.length;\\r\\n        if (length != amounts.length) revert INVALID_INPUT();\\r\\n\\r\\n        if (length > 25 || length < 2) revert INSUFFICIENT_RECIPIENT_COUNT();\\r\\n\\r\\n        uint256 totalAmount = 0;\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            if (recipients[i] == address(0)) revert INVALID_RECIPIENT();\\r\\n            if (amounts[i] == 0) revert INSUFFICIENT_SPLIT_AMOUNT();\\r\\n\\r\\n            totalAmount = totalAmount + amounts[i];\\r\\n\\r\\n            (bool success, ) = recipients[i].call{ value: amounts[i], gas: 20000 }(\\\"\\\");\\r\\n            if (!success) revert TRANSFER_FAILED();\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return totalAvailable - totalAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function to transfer ERC20 tokens from the sender to the recipients\\r\\n     * @param erc20Token The ERC20 token to be shared\\r\\n     * @param recipients The noble recipients of the tokens\\r\\n     * @param amounts The amounts each recipient shall receive\\r\\n     */\\r\\n    function _transferTokensFromSenderToRecipients(\\r\\n        IERC20 erc20Token,\\r\\n        address payable[] calldata recipients,\\r\\n        uint256[] calldata amounts\\r\\n    ) internal {\\r\\n        uint256 length = recipients.length;\\r\\n\\r\\n        if (length != amounts.length) revert INVALID_INPUT();\\r\\n        if (length > 25 || length < 2) revert INSUFFICIENT_RECIPIENT_COUNT();\\r\\n\\r\\n        for (uint256 i = 0; i < length; ) {\\r\\n            if (recipients[i] == address(0)) revert INVALID_RECIPIENT();\\r\\n            if (amounts[i] == 0) revert INSUFFICIENT_SPLIT_AMOUNT();\\r\\n\\r\\n            SafeERC20.safeTransferFrom(erc20Token, msg.sender, recipients[i], amounts[i]);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws the remaining ETH or ERC20 tokens to the owner's address\\r\\n     * @param token The address of the ERC20 token, or 0 for ETH\\r\\n     */\\r\\n    function withdraw(IERC20 token) external onlyOwner {\\r\\n        if (address(token) == address(0)) {\\r\\n            (bool success, ) = owner().call{ value: address(this).balance, gas: 20000 }(\\\"\\\");\\r\\n            if (!success) revert TRANSFER_FAILED();\\r\\n        } else {\\r\\n            token.transfer(owner(), token.balanceOf(address(this)));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xdf033258e0b05b1f982c82f1d9fc25bd122935a20d5d59edebfb90ed5a9d4cf8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001805460ff60a01b191690553480156200001e57600080fd5b5060405162001d4938038062001d498339810160408190526200004191620000db565b6001600055806001600160a01b0381166200007657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000818162000089565b50506200010d565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600060208284031215620000ee57600080fd5b81516001600160a01b03811681146200010657600080fd5b9392505050565b611c2c806200011d6000396000f3fe6080604052600436106100e15760003560e01c806382a86d9e1161007f57806395a078e81161005957806395a078e814610244578063a0cc5ac814610264578063a6471e1414610284578063f2fde38b146102a457600080fd5b806382a86d9e146101d557806388916b5b146101f55780638da5cb5b1461022657600080fd5b806357759c5c116100bb57806357759c5c1461015f57806367c8810f1461017f5780636f949ad0146101ad578063715018a6146101c057600080fd5b80630b1034b1146100ed57806319d5b0081461010257806351cff8d91461013f57600080fd5b366100e857005b600080fd5b6101006100fb3660046117be565b6102c4565b005b34801561010e57600080fd5b50600254610122906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014b57600080fd5b5061010061015a366004611815565b61060c565b34801561016b57600080fd5b5061010061017a366004611815565b6107a7565b34801561018b57600080fd5b5061019f61019a366004611815565b610887565b604051908152602001610136565b6101006101bb366004611832565b610930565b3480156101cc57600080fd5b50610100610b9b565b3480156101e157600080fd5b506101006101f036600461189e565b610baf565b34801561020157600080fd5b5060015461021690600160a01b900460ff1681565b6040519015158152602001610136565b34801561023257600080fd5b506001546001600160a01b0316610122565b34801561025057600080fd5b5061021661025f366004611815565b610da0565b34801561027057600080fd5b5061010061027f36600461192f565b610e42565b34801561029057600080fd5b5061010061029f36600461194c565b610ea2565b3480156102b057600080fd5b506101006102bf366004611815565b611178565b6102cc6111b8565b600154600160a01b900460ff1680156102ef57506002546001600160a01b031615155b1561038157600254604051631b63a96d60e21b81523360048201526001600160a01b03909116908190636d8ea5b490602401602060405180830381865afa15801561033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036291906119a8565b61037f576040516395383ea160e01b815260040160405180910390fd5b505b81818060005b8181101561044a57600061039c8260016119db565b90505b82811015610437578484828181106103b9576103b96119ee565b90506020020160208101906103ce9190611815565b6001600160a01b03168585848181106103e9576103e96119ee565b90506020020160208101906103fe9190611815565b6001600160a01b03160361042557604051632f119e0960e11b815260040160405180910390fd5b8061042f81611a04565b91505061039f565b508061044281611a04565b915050610387565b50348460006104598284611a33565b905060006104678385611a47565b905060198311806104785750600283105b156104965760405163393f616160e01b815260040160405180910390fd5b60005b838110156105b15760008a8a838181106104b5576104b56119ee565b90506020020160208101906104ca9190611815565b6001600160a01b0316036104f15760405163290802d360e11b815260040160405180910390fd5b8260008290036105085761050583826119db565b90505b60008b8b8481811061051c5761051c6119ee565b90506020020160208101906105319190611815565b6001600160a01b031682614e2090604051600060405180830381858888f193505050503d8060008114610580576040519150601f19603f3d011682016040523d82523d6000602084013e610585565b606091505b50509050806105a757604051631fa55c0760e11b815260040160405180910390fd5b5050600101610499565b50336001600160a01b03167f87f1eb586b0382990a8813b3bf1c9381de2d895114d7d2fc3277ccc737bcefcd348b8b6040516105ef93929190611aa4565b60405180910390a2505050505050506106086001600055565b5050565b6106146111e2565b6001600160a01b0381166106ac5760006106366001546001600160a01b031690565b6001600160a01b031647614e2090604051600060405180830381858888f193505050503d8060008114610685576040519150601f19603f3d011682016040523d82523d6000602084013e61068a565b606091505b505090508061060857604051631fa55c0760e11b815260040160405180910390fd5b806001600160a01b031663a9059cbb6106cd6001546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190611ac7565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060891906119a8565b50565b6107af6111e2565b6001600160a01b0381161561083d57604051631b63a96d60e21b81523060048201526001600160a01b03821690636d8ea5b490602401602060405180830381865afa92505050801561081e575060408051601f3d908101601f1916820190925261081b918101906119a8565b60015b61083b576040516378aa4a6160e01b815260040160405180910390fd5b505b600280546001600160a01b0319166001600160a01b0383169081179091556040517f23afc7d08d1edd1530d578faf4f81c3e6999c0fc3adb3882c0141a8a08c63e1490600090a250565b600154600090600160a01b900460ff1615806108ac57506002546001600160a01b0316155b156108b957506000919050565b6002546040516355efc16760e11b81526001600160a01b03848116600483015290911690819063abdf82ce90602401602060405180830381865afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190611ac7565b9392505050565b6109386111b8565b600154600160a01b900460ff16801561095b57506002546001600160a01b031615155b156109ed57600254604051631b63a96d60e21b81523360048201526001600160a01b03909116908190636d8ea5b490602401602060405180830381865afa1580156109aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ce91906119a8565b6109eb576040516395383ea160e01b815260040160405180910390fd5b505b83838060005b81811015610ab6576000610a088260016119db565b90505b82811015610aa357848482818110610a2557610a256119ee565b9050602002016020810190610a3a9190611815565b6001600160a01b0316858584818110610a5557610a556119ee565b9050602002016020810190610a6a9190611815565b6001600160a01b031603610a9157604051632f119e0960e11b815260040160405180910390fd5b80610a9b81611a04565b915050610a0b565b5080610aae81611a04565b9150506109f3565b506000610ac6888888883461120f565b9050336001600160a01b03167fce4a1ba06513226cf23618c48cd2a2d391b00be6079ac669924fa0218cca152b348a8a8a8a604051610b09959493929190611b12565b60405180910390a28015610b87576040516000903390614e2090849084818181858888f193505050503d8060008114610b5e576040519150601f19603f3d011682016040523d82523d6000602084013e610b63565b606091505b5050905080610b8557604051631fa55c0760e11b815260040160405180910390fd5b505b50505050610b956001600055565b50505050565b610ba36111e2565b610bad60006113f1565b565b610bb76111b8565b600154600160a01b900460ff168015610bda57506002546001600160a01b031615155b15610c6c57600254604051631b63a96d60e21b81523360048201526001600160a01b03909116908190636d8ea5b490602401602060405180830381865afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d91906119a8565b610c6a576040516395383ea160e01b815260040160405180910390fd5b505b83838060005b81811015610d35576000610c878260016119db565b90505b82811015610d2257848482818110610ca457610ca46119ee565b9050602002016020810190610cb99190611815565b6001600160a01b0316858584818110610cd457610cd46119ee565b9050602002016020810190610ce99190611815565b6001600160a01b031603610d1057604051632f119e0960e11b815260040160405180910390fd5b80610d1a81611a04565b915050610c8a565b5080610d2d81611a04565b915050610c72565b50610d438888888888611443565b336001600160a01b03167f4114dcfe2aaaf6aa4f0734763cbe121058528a2e296173d8a63900e13966e064888888888d604051610d84959493929190611b3f565b60405180910390a2505050610d996001600055565b5050505050565b600154600090600160a01b900460ff161580610dc557506002546001600160a01b0316155b15610dd257506001919050565b600254604051631b63a96d60e21b81526001600160a01b038481166004830152909116908190636d8ea5b490602401602060405180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092991906119a8565b610e4a6111e2565b60018054821515600160a01b0260ff60a01b199091161790556040517fa9ff9e23d584c4bff32e498bd1f6ef2cafe812447499c0e1a4a1613adc77689f90610e9790831515815260200190565b60405180910390a150565b610eaa6111b8565b600154600160a01b900460ff168015610ecd57506002546001600160a01b031615155b15610f5f57600254604051631b63a96d60e21b81523360048201526001600160a01b03909116908190636d8ea5b490602401602060405180830381865afa158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4091906119a8565b610f5d576040516395383ea160e01b815260040160405180910390fd5b505b82828060005b81811015611028576000610f7a8260016119db565b90505b8281101561101557848482818110610f9757610f976119ee565b9050602002016020810190610fac9190611815565b6001600160a01b0316858584818110610fc757610fc76119ee565b9050602002016020810190610fdc9190611815565b6001600160a01b03160361100357604051632f119e0960e11b815260040160405180910390fd5b8061100d81611a04565b915050610f7d565b508061102081611a04565b915050610f65565b508460198111806110395750600281105b156110575760405163393f616160e01b815260040160405180910390fd5b60006110638287611a33565b905060006110718388611a47565b905060005b838110156111205760008a8a83818110611092576110926119ee565b90506020020160208101906110a79190611815565b6001600160a01b0316036110ce5760405163290802d360e11b815260040160405180910390fd5b8260008290036110e5576110e283826119db565b90505b6111178c338d8d868181106110fc576110fc6119ee565b90506020020160208101906111119190611815565b84611580565b50600101611076565b50336001600160a01b03167f76a95c273288c88de8fb190aa9eb3e12866d73a32acf083fa4642a89b7fa523d888b8b8e6040516111609493929190611b81565b60405180910390a2505050505050610b956001600055565b6111806111e2565b6001600160a01b0381166111af57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6107a4816113f1565b6002600054036111db57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6001546001600160a01b03163314610bad5760405163118cdaa760e01b81523360048201526024016111a6565b6000848381146112325760405163b68600c760e01b815260040160405180910390fd5b60198111806112415750600281105b1561125f5760405163393f616160e01b815260040160405180910390fd5b6000805b828110156113da57600089898381811061127f5761127f6119ee565b90506020020160208101906112949190611815565b6001600160a01b0316036112bb5760405163290802d360e11b815260040160405180910390fd5b8686828181106112cd576112cd6119ee565b905060200201356000036112f457604051631161496d60e01b815260040160405180910390fd5b868682818110611306576113066119ee565b905060200201358261131891906119db565b9150600089898381811061132e5761132e6119ee565b90506020020160208101906113439190611815565b6001600160a01b031688888481811061135e5761135e6119ee565b90506020020135614e2090604051600060405180830381858888f193505050503d80600081146113aa576040519150601f19603f3d011682016040523d82523d6000602084013e6113af565b606091505b50509050806113d157604051631fa55c0760e11b815260040160405180910390fd5b50600101611263565b506113e58185611bb4565b98975050505050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828181146114645760405163b68600c760e01b815260040160405180910390fd5b60198111806114735750600281105b156114915760405163393f616160e01b815260040160405180910390fd5b60005b818110156115775760008686838181106114b0576114b06119ee565b90506020020160208101906114c59190611815565b6001600160a01b0316036114ec5760405163290802d360e11b815260040160405180910390fd5b8383828181106114fe576114fe6119ee565b9050602002013560000361152557604051631161496d60e01b815260040160405180910390fd5b61156f873388888581811061153c5761153c6119ee565b90506020020160208101906115519190611815565b878786818110611563576115636119ee565b90506020020135611580565b600101611494565b50505050505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092019092526020810180516001600160e01b03166323b872dd60e01b179052610b95918691906000906115e690841683611639565b9050805160001415801561160b57508080602001905181019061160991906119a8565b155b1561163457604051635274afe760e01b81526001600160a01b03841660048201526024016111a6565b505050565b606061164783836000611650565b90505b92915050565b6060814710156116755760405163cd78605960e01b81523060048201526024016111a6565b600080856001600160a01b031684866040516116919190611bc7565b60006040518083038185875af1925050503d80600081146116ce576040519150601f19603f3d011682016040523d82523d6000602084013e6116d3565b606091505b50915091506116e38683836116ed565b9695505050505050565b606082611702576116fd82611749565b610929565b815115801561171957506001600160a01b0384163b155b1561174257604051639996b31560e01b81526001600160a01b03851660048201526024016111a6565b5080610929565b8051156117595780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008083601f84011261178457600080fd5b50813567ffffffffffffffff81111561179c57600080fd5b6020830191508360208260051b85010111156117b757600080fd5b9250929050565b600080602083850312156117d157600080fd5b823567ffffffffffffffff8111156117e857600080fd5b6117f485828601611772565b90969095509350505050565b6001600160a01b03811681146107a457600080fd5b60006020828403121561182757600080fd5b813561092981611800565b6000806000806040858703121561184857600080fd5b843567ffffffffffffffff8082111561186057600080fd5b61186c88838901611772565b9096509450602087013591508082111561188557600080fd5b5061189287828801611772565b95989497509550505050565b6000806000806000606086880312156118b657600080fd5b85356118c181611800565b9450602086013567ffffffffffffffff808211156118de57600080fd5b6118ea89838a01611772565b9096509450604088013591508082111561190357600080fd5b5061191088828901611772565b969995985093965092949392505050565b80151581146107a457600080fd5b60006020828403121561194157600080fd5b813561092981611921565b6000806000806060858703121561196257600080fd5b843561196d81611800565b9350602085013567ffffffffffffffff81111561198957600080fd5b61199587828801611772565b9598909750949560400135949350505050565b6000602082840312156119ba57600080fd5b815161092981611921565b634e487b7160e01b600052601160045260246000fd5b8082018082111561164a5761164a6119c5565b634e487b7160e01b600052603260045260246000fd5b600060018201611a1657611a166119c5565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611a4257611a42611a1d565b500490565b600082611a5657611a56611a1d565b500690565b8183526000602080850194508260005b85811015611a99578135611a7e81611800565b6001600160a01b031687529582019590820190600101611a6b565b509495945050505050565b838152604060208201526000611abe604083018486611a5b565b95945050505050565b600060208284031215611ad957600080fd5b5051919050565b81835260006001600160fb1b03831115611af957600080fd5b8260051b80836020870137939093016020019392505050565b858152606060208201526000611b2c606083018688611a5b565b82810360408401526113e5818587611ae0565b606081526000611b53606083018789611a5b565b8281036020840152611b66818688611ae0565b91505060018060a01b03831660408301529695505050505050565b848152606060208201526000611b9b606083018587611a5b565b905060018060a01b038316604083015295945050505050565b8181038181111561164a5761164a6119c5565b6000825160005b81811015611be85760208186018101518583015201611bce565b50600092019182525091905056fea2646970667358221220061f2d1962ae41e1dee465c884e424d1d0431d1faeeb138d1ff7b6fbf6e11cf364736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c806382a86d9e1161007f57806395a078e81161005957806395a078e814610244578063a0cc5ac814610264578063a6471e1414610284578063f2fde38b146102a457600080fd5b806382a86d9e146101d557806388916b5b146101f55780638da5cb5b1461022657600080fd5b806357759c5c116100bb57806357759c5c1461015f57806367c8810f1461017f5780636f949ad0146101ad578063715018a6146101c057600080fd5b80630b1034b1146100ed57806319d5b0081461010257806351cff8d91461013f57600080fd5b366100e857005b600080fd5b6101006100fb3660046117be565b6102c4565b005b34801561010e57600080fd5b50600254610122906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014b57600080fd5b5061010061015a366004611815565b61060c565b34801561016b57600080fd5b5061010061017a366004611815565b6107a7565b34801561018b57600080fd5b5061019f61019a366004611815565b610887565b604051908152602001610136565b6101006101bb366004611832565b610930565b3480156101cc57600080fd5b50610100610b9b565b3480156101e157600080fd5b506101006101f036600461189e565b610baf565b34801561020157600080fd5b5060015461021690600160a01b900460ff1681565b6040519015158152602001610136565b34801561023257600080fd5b506001546001600160a01b0316610122565b34801561025057600080fd5b5061021661025f366004611815565b610da0565b34801561027057600080fd5b5061010061027f36600461192f565b610e42565b34801561029057600080fd5b5061010061029f36600461194c565b610ea2565b3480156102b057600080fd5b506101006102bf366004611815565b611178565b6102cc6111b8565b600154600160a01b900460ff1680156102ef57506002546001600160a01b031615155b1561038157600254604051631b63a96d60e21b81523360048201526001600160a01b03909116908190636d8ea5b490602401602060405180830381865afa15801561033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036291906119a8565b61037f576040516395383ea160e01b815260040160405180910390fd5b505b81818060005b8181101561044a57600061039c8260016119db565b90505b82811015610437578484828181106103b9576103b96119ee565b90506020020160208101906103ce9190611815565b6001600160a01b03168585848181106103e9576103e96119ee565b90506020020160208101906103fe9190611815565b6001600160a01b03160361042557604051632f119e0960e11b815260040160405180910390fd5b8061042f81611a04565b91505061039f565b508061044281611a04565b915050610387565b50348460006104598284611a33565b905060006104678385611a47565b905060198311806104785750600283105b156104965760405163393f616160e01b815260040160405180910390fd5b60005b838110156105b15760008a8a838181106104b5576104b56119ee565b90506020020160208101906104ca9190611815565b6001600160a01b0316036104f15760405163290802d360e11b815260040160405180910390fd5b8260008290036105085761050583826119db565b90505b60008b8b8481811061051c5761051c6119ee565b90506020020160208101906105319190611815565b6001600160a01b031682614e2090604051600060405180830381858888f193505050503d8060008114610580576040519150601f19603f3d011682016040523d82523d6000602084013e610585565b606091505b50509050806105a757604051631fa55c0760e11b815260040160405180910390fd5b5050600101610499565b50336001600160a01b03167f87f1eb586b0382990a8813b3bf1c9381de2d895114d7d2fc3277ccc737bcefcd348b8b6040516105ef93929190611aa4565b60405180910390a2505050505050506106086001600055565b5050565b6106146111e2565b6001600160a01b0381166106ac5760006106366001546001600160a01b031690565b6001600160a01b031647614e2090604051600060405180830381858888f193505050503d8060008114610685576040519150601f19603f3d011682016040523d82523d6000602084013e61068a565b606091505b505090508061060857604051631fa55c0760e11b815260040160405180910390fd5b806001600160a01b031663a9059cbb6106cd6001546001600160a01b031690565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107359190611ac7565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060891906119a8565b50565b6107af6111e2565b6001600160a01b0381161561083d57604051631b63a96d60e21b81523060048201526001600160a01b03821690636d8ea5b490602401602060405180830381865afa92505050801561081e575060408051601f3d908101601f1916820190925261081b918101906119a8565b60015b61083b576040516378aa4a6160e01b815260040160405180910390fd5b505b600280546001600160a01b0319166001600160a01b0383169081179091556040517f23afc7d08d1edd1530d578faf4f81c3e6999c0fc3adb3882c0141a8a08c63e1490600090a250565b600154600090600160a01b900460ff1615806108ac57506002546001600160a01b0316155b156108b957506000919050565b6002546040516355efc16760e11b81526001600160a01b03848116600483015290911690819063abdf82ce90602401602060405180830381865afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190611ac7565b9392505050565b6109386111b8565b600154600160a01b900460ff16801561095b57506002546001600160a01b031615155b156109ed57600254604051631b63a96d60e21b81523360048201526001600160a01b03909116908190636d8ea5b490602401602060405180830381865afa1580156109aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ce91906119a8565b6109eb576040516395383ea160e01b815260040160405180910390fd5b505b83838060005b81811015610ab6576000610a088260016119db565b90505b82811015610aa357848482818110610a2557610a256119ee565b9050602002016020810190610a3a9190611815565b6001600160a01b0316858584818110610a5557610a556119ee565b9050602002016020810190610a6a9190611815565b6001600160a01b031603610a9157604051632f119e0960e11b815260040160405180910390fd5b80610a9b81611a04565b915050610a0b565b5080610aae81611a04565b9150506109f3565b506000610ac6888888883461120f565b9050336001600160a01b03167fce4a1ba06513226cf23618c48cd2a2d391b00be6079ac669924fa0218cca152b348a8a8a8a604051610b09959493929190611b12565b60405180910390a28015610b87576040516000903390614e2090849084818181858888f193505050503d8060008114610b5e576040519150601f19603f3d011682016040523d82523d6000602084013e610b63565b606091505b5050905080610b8557604051631fa55c0760e11b815260040160405180910390fd5b505b50505050610b956001600055565b50505050565b610ba36111e2565b610bad60006113f1565b565b610bb76111b8565b600154600160a01b900460ff168015610bda57506002546001600160a01b031615155b15610c6c57600254604051631b63a96d60e21b81523360048201526001600160a01b03909116908190636d8ea5b490602401602060405180830381865afa158015610c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4d91906119a8565b610c6a576040516395383ea160e01b815260040160405180910390fd5b505b83838060005b81811015610d35576000610c878260016119db565b90505b82811015610d2257848482818110610ca457610ca46119ee565b9050602002016020810190610cb99190611815565b6001600160a01b0316858584818110610cd457610cd46119ee565b9050602002016020810190610ce99190611815565b6001600160a01b031603610d1057604051632f119e0960e11b815260040160405180910390fd5b80610d1a81611a04565b915050610c8a565b5080610d2d81611a04565b915050610c72565b50610d438888888888611443565b336001600160a01b03167f4114dcfe2aaaf6aa4f0734763cbe121058528a2e296173d8a63900e13966e064888888888d604051610d84959493929190611b3f565b60405180910390a2505050610d996001600055565b5050505050565b600154600090600160a01b900460ff161580610dc557506002546001600160a01b0316155b15610dd257506001919050565b600254604051631b63a96d60e21b81526001600160a01b038481166004830152909116908190636d8ea5b490602401602060405180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092991906119a8565b610e4a6111e2565b60018054821515600160a01b0260ff60a01b199091161790556040517fa9ff9e23d584c4bff32e498bd1f6ef2cafe812447499c0e1a4a1613adc77689f90610e9790831515815260200190565b60405180910390a150565b610eaa6111b8565b600154600160a01b900460ff168015610ecd57506002546001600160a01b031615155b15610f5f57600254604051631b63a96d60e21b81523360048201526001600160a01b03909116908190636d8ea5b490602401602060405180830381865afa158015610f1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4091906119a8565b610f5d576040516395383ea160e01b815260040160405180910390fd5b505b82828060005b81811015611028576000610f7a8260016119db565b90505b8281101561101557848482818110610f9757610f976119ee565b9050602002016020810190610fac9190611815565b6001600160a01b0316858584818110610fc757610fc76119ee565b9050602002016020810190610fdc9190611815565b6001600160a01b03160361100357604051632f119e0960e11b815260040160405180910390fd5b8061100d81611a04565b915050610f7d565b508061102081611a04565b915050610f65565b508460198111806110395750600281105b156110575760405163393f616160e01b815260040160405180910390fd5b60006110638287611a33565b905060006110718388611a47565b905060005b838110156111205760008a8a83818110611092576110926119ee565b90506020020160208101906110a79190611815565b6001600160a01b0316036110ce5760405163290802d360e11b815260040160405180910390fd5b8260008290036110e5576110e283826119db565b90505b6111178c338d8d868181106110fc576110fc6119ee565b90506020020160208101906111119190611815565b84611580565b50600101611076565b50336001600160a01b03167f76a95c273288c88de8fb190aa9eb3e12866d73a32acf083fa4642a89b7fa523d888b8b8e6040516111609493929190611b81565b60405180910390a2505050505050610b956001600055565b6111806111e2565b6001600160a01b0381166111af57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6107a4816113f1565b6002600054036111db57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6001546001600160a01b03163314610bad5760405163118cdaa760e01b81523360048201526024016111a6565b6000848381146112325760405163b68600c760e01b815260040160405180910390fd5b60198111806112415750600281105b1561125f5760405163393f616160e01b815260040160405180910390fd5b6000805b828110156113da57600089898381811061127f5761127f6119ee565b90506020020160208101906112949190611815565b6001600160a01b0316036112bb5760405163290802d360e11b815260040160405180910390fd5b8686828181106112cd576112cd6119ee565b905060200201356000036112f457604051631161496d60e01b815260040160405180910390fd5b868682818110611306576113066119ee565b905060200201358261131891906119db565b9150600089898381811061132e5761132e6119ee565b90506020020160208101906113439190611815565b6001600160a01b031688888481811061135e5761135e6119ee565b90506020020135614e2090604051600060405180830381858888f193505050503d80600081146113aa576040519150601f19603f3d011682016040523d82523d6000602084013e6113af565b606091505b50509050806113d157604051631fa55c0760e11b815260040160405180910390fd5b50600101611263565b506113e58185611bb4565b98975050505050505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828181146114645760405163b68600c760e01b815260040160405180910390fd5b60198111806114735750600281105b156114915760405163393f616160e01b815260040160405180910390fd5b60005b818110156115775760008686838181106114b0576114b06119ee565b90506020020160208101906114c59190611815565b6001600160a01b0316036114ec5760405163290802d360e11b815260040160405180910390fd5b8383828181106114fe576114fe6119ee565b9050602002013560000361152557604051631161496d60e01b815260040160405180910390fd5b61156f873388888581811061153c5761153c6119ee565b90506020020160208101906115519190611815565b878786818110611563576115636119ee565b90506020020135611580565b600101611494565b50505050505050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092019092526020810180516001600160e01b03166323b872dd60e01b179052610b95918691906000906115e690841683611639565b9050805160001415801561160b57508080602001905181019061160991906119a8565b155b1561163457604051635274afe760e01b81526001600160a01b03841660048201526024016111a6565b505050565b606061164783836000611650565b90505b92915050565b6060814710156116755760405163cd78605960e01b81523060048201526024016111a6565b600080856001600160a01b031684866040516116919190611bc7565b60006040518083038185875af1925050503d80600081146116ce576040519150601f19603f3d011682016040523d82523d6000602084013e6116d3565b606091505b50915091506116e38683836116ed565b9695505050505050565b606082611702576116fd82611749565b610929565b815115801561171957506001600160a01b0384163b155b1561174257604051639996b31560e01b81526001600160a01b03851660048201526024016111a6565b5080610929565b8051156117595780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60008083601f84011261178457600080fd5b50813567ffffffffffffffff81111561179c57600080fd5b6020830191508360208260051b85010111156117b757600080fd5b9250929050565b600080602083850312156117d157600080fd5b823567ffffffffffffffff8111156117e857600080fd5b6117f485828601611772565b90969095509350505050565b6001600160a01b03811681146107a457600080fd5b60006020828403121561182757600080fd5b813561092981611800565b6000806000806040858703121561184857600080fd5b843567ffffffffffffffff8082111561186057600080fd5b61186c88838901611772565b9096509450602087013591508082111561188557600080fd5b5061189287828801611772565b95989497509550505050565b6000806000806000606086880312156118b657600080fd5b85356118c181611800565b9450602086013567ffffffffffffffff808211156118de57600080fd5b6118ea89838a01611772565b9096509450604088013591508082111561190357600080fd5b5061191088828901611772565b969995985093965092949392505050565b80151581146107a457600080fd5b60006020828403121561194157600080fd5b813561092981611921565b6000806000806060858703121561196257600080fd5b843561196d81611800565b9350602085013567ffffffffffffffff81111561198957600080fd5b61199587828801611772565b9598909750949560400135949350505050565b6000602082840312156119ba57600080fd5b815161092981611921565b634e487b7160e01b600052601160045260246000fd5b8082018082111561164a5761164a6119c5565b634e487b7160e01b600052603260045260246000fd5b600060018201611a1657611a166119c5565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611a4257611a42611a1d565b500490565b600082611a5657611a56611a1d565b500690565b8183526000602080850194508260005b85811015611a99578135611a7e81611800565b6001600160a01b031687529582019590820190600101611a6b565b509495945050505050565b838152604060208201526000611abe604083018486611a5b565b95945050505050565b600060208284031215611ad957600080fd5b5051919050565b81835260006001600160fb1b03831115611af957600080fd5b8260051b80836020870137939093016020019392505050565b858152606060208201526000611b2c606083018688611a5b565b82810360408401526113e5818587611ae0565b606081526000611b53606083018789611a5b565b8281036020840152611b66818688611ae0565b91505060018060a01b03831660408301529695505050505050565b848152606060208201526000611b9b606083018587611a5b565b905060018060a01b038316604083015295945050505050565b8181038181111561164a5761164a6119c5565b6000825160005b81811015611be85760208186018101518583015201611bce565b50600092019182525091905056fea2646970667358221220061f2d1962ae41e1dee465c884e424d1d0431d1faeeb138d1ff7b6fbf6e11cf364736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_initialOwner": "The initial owner of the contract"
        }
      },
      "getKeyExpiration(address)": {
        "params": {
          "user": "The address to check"
        },
        "returns": {
          "_0": "expiration The expiration timestamp (0 if no key or feeSwitch is off)"
        }
      },
      "hasAccess(address)": {
        "params": {
          "user": "The address to check"
        },
        "returns": {
          "_0": "hasAccess True if user has access"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setSplitLock(address)": {
        "params": {
          "_splitLock": "The Unlock Protocol lock address"
        }
      },
      "splitERC20(address,address[],uint256[])": {
        "params": {
          "amounts": "The amounts each recipient shall receive",
          "recipients": "The noble recipients of the ERC20 tokens",
          "token": "The token of friendship to be shared amongst the recipients"
        }
      },
      "splitETH(address[],uint256[])": {
        "params": {
          "amounts": "The amounts each recipient shall receive",
          "recipients": "The noble recipients of the ETH"
        }
      },
      "splitEqualERC20(address,address[],uint256)": {
        "params": {
          "recipients": "The noble recipients of the ERC20 tokens",
          "token": "The token of friendship to be shared amongst the recipients",
          "totalAmount": "The total amount to be shared"
        }
      },
      "splitEqualETH(address[])": {
        "details": "The contract gracefully adds any leftover dust to the amount to be received by the first recipient in the input array.",
        "params": {
          "recipients": "The noble recipients of the ETH"
        }
      },
      "toggleFeeSwitch(bool)": {
        "params": {
          "_enabled": "Whether to enable token-gating"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address)": {
        "params": {
          "token": "The address of the ERC20 token, or 0 for ETH"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "The constructor sets the owner of the contract"
      },
      "getKeyExpiration(address)": {
        "notice": "Get key expiration timestamp for a user"
      },
      "hasAccess(address)": {
        "notice": "Check if an address has access to protected functions"
      },
      "setSplitLock(address)": {
        "notice": "Set the splitLock address for token-gating"
      },
      "splitERC20(address,address[],uint256[])": {
        "notice": "Splits the ERC20 tokens amongst the given recipients, according to the specified amounts"
      },
      "splitETH(address[],uint256[])": {
        "notice": "Splits the ETH amongst the given recipients, according to the specified amounts"
      },
      "splitEqualERC20(address,address[],uint256)": {
        "notice": "Splits the ERC20 tokens equally amongst the given recipients"
      },
      "splitEqualETH(address[])": {
        "notice": "Splits the ETH equally amongst the given recipients"
      },
      "toggleFeeSwitch(bool)": {
        "notice": "Toggle the feeSwitch on or off"
      },
      "withdraw(address)": {
        "notice": "Withdraws the remaining ETH or ERC20 tokens to the owner's address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 845,
        "contract": "contracts/Splitter.sol:DGTokenSplitter",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/Splitter.sol:DGTokenSplitter",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 950,
        "contract": "contracts/Splitter.sol:DGTokenSplitter",
        "label": "feeSwitch",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 952,
        "contract": "contracts/Splitter.sol:DGTokenSplitter",
        "label": "splitLock",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}